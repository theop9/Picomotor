# -*- coding: utf-8 -*-
"""
Created on Mon Jun  2 13:53:25 2025

@author: theod
"""

import sys
import os
import inspect
# Import the .NET Common Language Runtime (CLR) to allow interaction with .NET
import clr
import numpy as np

print ("Python %s\n\n" % (sys.version,))

strCurrFile = os.path.abspath (inspect.stack()[0][1])
print ("Executing File = %s\n" % strCurrFile)

# Initialize the DLL folder path to where the DLLs are located
strPathDllFolder = os.path.dirname (strCurrFile)
print ("Executing Dir  = %s\n" % strPathDllFolder)

# Add the DLL folder path to the system search path (before adding references)
sys.path.append (strPathDllFolder)

# Add a reference to each .NET assembly required
clr.AddReference ("DeviceIOLib")
clr.AddReference ("CmdLib8742")

# Import a class from a namespace
from Newport.DeviceIOLib import *
from NewFocus.PicomotorApp import CmdLib8742
from System.Text import StringBuilder

print ("Waiting for device discovery...")
# Call the class constructor to create an object
deviceIO = DeviceIOLib (True)
cmdLib8742 = CmdLib8742 (deviceIO)

# Set up USB to only discover picomotors
deviceIO.SetUSBProductID (0x4000);

# Discover USB and Ethernet devices - delay 5 seconds
deviceIO.DiscoverDevices (1, 100)

# Get the list of discovered devices
strDeviceKeys = np.array ([])
strDeviceKeys = deviceIO.GetDeviceKeys ()
nDeviceCount = deviceIO.GetDeviceCount ()
print ("Device Count = %d\n" % nDeviceCount)


class picomotor:
    
    def __init__(self, name):
        self.name = name
        self.DeviceCount = deviceIO.GetDeviceCount ()
        self.DeviceKeys = deviceIO.GetDeviceKeys ()
        
        
    def get_slave_count(self):
        #for each device
        for i in range(self.DeviceCount):
            strDeviceKey = str(self.DeviceKeys[i])
            if deviceIO.Open(strDeviceKey):
                nDeviceAddress = cmdLib8742.GetMasterAddress(strDeviceKey)
                strModelSerial = cmdLib8742.GetModelSerial(strDeviceKey, nDeviceAddress)
                nSlaveCount = cmdLib8742.GetSlaveCount(strDeviceKey)
                print(f"device {i} : {nSlaveCount} slaves")
                    
        
    def get_position(self, addr=[1,2], axis=[1,2,3]):
        
        strBldr = StringBuilder(64)
        for i in range(self.DeviceCount):
            strDeviceKey = 1
            strBldr.Remove(0, strBldr.Length)
            cmd = f"{addr}>{axis}TP?"
            nreturn = cmdLib8742.Query(strDeviceKey, cmd, strBldr)
        

cmdLib8742.Shutdown ()
deviceIO.Shutdown ()
    
# o = nom_classe()
# o.fonction_class()
# o.shutdown

